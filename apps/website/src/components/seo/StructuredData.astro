---
/**
 * StructuredData component for consistent JSON-LD schema markup
 * Supports Organization, Person, SoftwareApplication, FAQ, Article, LocalBusiness, WebSite, and HowTo schemas
 */

export interface Props {
  type:
    | 'organization'
    | 'person'
    | 'software'
    | 'faq'
    | 'breadcrumb'
    | 'article'
    | 'localbusiness'
    | 'website'
    | 'howto'
    | 'custom';
  data?: Record<string, unknown>;
  faqs?: Array<{ question: string; answer: string }>;
  breadcrumbs?: Array<{ name: string; url: string }>;
  article?: {
    title: string;
    description: string;
    author?: string;
    publishedDate: string;
    modifiedDate?: string;
    image?: string;
    url: string;
    category?: string;
    keywords?: string[];
  };
  howTo?: {
    name: string;
    description: string;
    image?: string;
    estimatedCost?: string;
    totalTime?: string;
    steps: Array<{
      name: string;
      text: string;
      image?: string;
      url?: string;
    }>;
  };
}

import {
  createOrganizationSchema,
  createPersonSchema,
  createSoftwareApplicationSchema,
  createFAQSchema,
  createBreadcrumbSchema,
  createArticleSchema,
  createLocalBusinessSchema,
  createWebSiteSchema,
  createHowToSchema,
} from '../../utils/seo';

const { type, data, faqs = [], breadcrumbs = [], article, howTo } = Astro.props;

let schemaData: Record<string, unknown> = {};

switch (type) {
  case 'organization':
    schemaData = createOrganizationSchema();
    break;
  case 'person':
    schemaData = createPersonSchema();
    break;
  case 'software':
    schemaData = createSoftwareApplicationSchema();
    break;
  case 'faq':
    schemaData = createFAQSchema(faqs);
    break;
  case 'breadcrumb':
    schemaData = createBreadcrumbSchema(breadcrumbs);
    break;
  case 'article':
    if (article) {
      schemaData = createArticleSchema(article);
    }
    break;
  case 'localbusiness':
    schemaData = createLocalBusinessSchema();
    break;
  case 'website':
    schemaData = createWebSiteSchema();
    break;
  case 'howto':
    if (howTo) {
      schemaData = createHowToSchema(howTo);
    }
    break;
  case 'custom':
    schemaData = data || {};
    break;
  default:
    schemaData = {};
}

// Merge with additional data if provided
if (data && type !== 'custom') {
  schemaData = { ...schemaData, ...data };
}
---

{
  schemaData && Object.keys(schemaData).length > 0 && (
    <script
      type="application/ld+json"
      is:inline
      set:html={JSON.stringify(schemaData)}
    />
  )
}
