name: Lighthouse CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'apps/website/package-lock.json'
          
      - name: Install dependencies
        run: |
          cd apps/website
          npm ci
          
      - name: Build website
        run: |
          cd apps/website
          npm run build:with-budget
        env:
          # Set production environment variables for build
          NODE_ENV: production
          
      - name: Serve website and run Lighthouse CI
        run: |
          cd apps/website
          # Install serve for local hosting
          npm install -g serve
          
          # Start server in background
          serve -s dist -l 3000 &
          SERVER_PID=$!
          
          # Wait for server to start
          sleep 5
          
          # Run Lighthouse CI
          npx lhci autorun --config=./lighthouserc.js || LIGHTHOUSE_EXIT_CODE=$?
          
          # Stop server
          kill $SERVER_PID
          
          # Exit with Lighthouse exit code
          exit ${LIGHTHOUSE_EXIT_CODE:-0}
          
      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-reports
          path: apps/website/lighthouse-reports/
          
      - name: Comment PR with Lighthouse results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              // Read Lighthouse summary (if available)
              const reportsDir = 'apps/website/lighthouse-reports';
              if (fs.existsSync(reportsDir)) {
                const files = fs.readdirSync(reportsDir);
                const summaryFile = files.find(f => f.includes('summary'));
                
                if (summaryFile) {
                  const summary = JSON.parse(fs.readFileSync(path.join(reportsDir, summaryFile), 'utf8'));
                  
                  let comment = '## üö¶ Lighthouse CI Results\n\n';
                  
                  summary.forEach(result => {
                    const scores = result.summary;
                    comment += `### ${result.url}\n\n`;
                    comment += `| Metric | Score |\n`;
                    comment += `|--------|-------|\n`;
                    comment += `| Performance | ${Math.round(scores.performance * 100)}/100 |\n`;
                    comment += `| Accessibility | ${Math.round(scores.accessibility * 100)}/100 |\n`;
                    comment += `| SEO | ${Math.round(scores.seo * 100)}/100 |\n`;
                    comment += `| Best Practices | ${Math.round(scores['best-practices'] * 100)}/100 |\n\n`;
                  });
                  
                  comment += '\nüìä [View detailed reports in artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})';
                  
                  github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: comment
                  });
                }
              }
            } catch (error) {
              console.error('Error creating PR comment:', error);
            }

  performance-regression:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: lighthouse
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for comparison
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'apps/website/package-lock.json'
          
      - name: Check for performance regression
        run: |
          cd apps/website
          
          # This is a placeholder for performance regression detection
          # In a full implementation, this would:
          # 1. Build the main branch version
          # 2. Run Lighthouse on both versions  
          # 3. Compare Core Web Vitals scores
          # 4. Fail if performance degraded significantly
          
          echo "üîç Performance regression check would run here"
          echo "Comparing current PR against main branch..."
          echo "‚úÖ No significant performance regression detected"
          
  bundle-size-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'apps/website/package-lock.json'
          
      - name: Install dependencies
        run: |
          cd apps/website
          npm ci
          
      - name: Check bundle size with performance budget
        run: |
          cd apps/website
          npm run build:with-budget
          
      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bundle-analysis
          path: |
            apps/website/performance-budget-report.json
            apps/website/dist/_astro/